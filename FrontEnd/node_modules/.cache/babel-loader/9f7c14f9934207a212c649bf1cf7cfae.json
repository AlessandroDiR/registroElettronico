{"ast":null,"code":"/*!\nFullCalendar Google Calendar Plugin v4.3.0\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\nimport { createPlugin, refineProps, requestJson, addDays } from '@fullcalendar/core';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n}; // TODO: expose somehow\n\n\nvar API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';\nvar STANDARD_PROPS = {\n  url: String,\n  googleCalendarApiKey: String,\n  googleCalendarId: String,\n  data: null\n};\nvar eventSourceDef = {\n  parseMeta: function (raw) {\n    if (typeof raw === 'string') {\n      raw = {\n        url: raw\n      };\n    }\n\n    if (typeof raw === 'object') {\n      var standardProps = refineProps(raw, STANDARD_PROPS);\n\n      if (!standardProps.googleCalendarId && standardProps.url) {\n        standardProps.googleCalendarId = parseGoogleCalendarId(standardProps.url);\n      }\n\n      delete standardProps.url;\n\n      if (standardProps.googleCalendarId) {\n        return standardProps;\n      }\n    }\n\n    return null;\n  },\n  fetch: function (arg, onSuccess, onFailure) {\n    var calendar = arg.calendar;\n    var meta = arg.eventSource.meta;\n    var apiKey = meta.googleCalendarApiKey || calendar.opt('googleCalendarApiKey');\n\n    if (!apiKey) {\n      onFailure({\n        message: 'Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/'\n      });\n    } else {\n      var url = buildUrl(meta);\n      var requestParams_1 = buildRequestParams(arg.range, apiKey, meta.data, calendar.dateEnv);\n      requestJson('GET', url, requestParams_1, function (body, xhr) {\n        if (body.error) {\n          onFailure({\n            message: 'Google Calendar API: ' + body.error.message,\n            errors: body.error.errors,\n            xhr: xhr\n          });\n        } else {\n          onSuccess({\n            rawEvents: gcalItemsToRawEventDefs(body.items, requestParams_1.timeZone),\n            xhr: xhr\n          });\n        }\n      }, function (message, xhr) {\n        onFailure({\n          message: message,\n          xhr: xhr\n        });\n      });\n    }\n  }\n};\n\nfunction parseGoogleCalendarId(url) {\n  var match; // detect if the ID was specified as a single string.\n  // will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.\n\n  if (/^[^\\/]+@([^\\/\\.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {\n    return url;\n  } else if ((match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^\\/]*)/.exec(url)) || (match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^\\/]*)/.exec(url))) {\n    return decodeURIComponent(match[1]);\n  }\n}\n\nfunction buildUrl(meta) {\n  return API_BASE + '/' + encodeURIComponent(meta.googleCalendarId) + '/events';\n}\n\nfunction buildRequestParams(range, apiKey, extraParams, dateEnv) {\n  var params;\n  var startStr;\n  var endStr;\n\n  if (dateEnv.canComputeOffset) {\n    // strings will naturally have offsets, which GCal needs\n    startStr = dateEnv.formatIso(range.start);\n    endStr = dateEnv.formatIso(range.end);\n  } else {\n    // when timezone isn't known, we don't know what the UTC offset should be, so ask for +/- 1 day\n    // from the UTC day-start to guarantee we're getting all the events\n    // (start/end will be UTC-coerced dates, so toISOString is okay)\n    startStr = addDays(range.start, -1).toISOString();\n    endStr = addDays(range.end, 1).toISOString();\n  }\n\n  params = __assign({}, extraParams || {}, {\n    key: apiKey,\n    timeMin: startStr,\n    timeMax: endStr,\n    singleEvents: true,\n    maxResults: 9999\n  });\n\n  if (dateEnv.timeZone !== 'local') {\n    params.timeZone = dateEnv.timeZone;\n  }\n\n  return params;\n}\n\nfunction gcalItemsToRawEventDefs(items, gcalTimezone) {\n  return items.map(function (item) {\n    return gcalItemToRawEventDef(item, gcalTimezone);\n  });\n}\n\nfunction gcalItemToRawEventDef(item, gcalTimezone) {\n  var url = item.htmlLink || null; // make the URLs for each event show times in the correct timezone\n\n  if (url && gcalTimezone) {\n    url = injectQsComponent(url, 'ctz=' + gcalTimezone);\n  }\n\n  return {\n    id: item.id,\n    title: item.summary,\n    start: item.start.dateTime || item.start.date,\n    end: item.end.dateTime || item.end.date,\n    url: url,\n    location: item.location,\n    description: item.description\n  };\n} // Injects a string like \"arg=value\" into the querystring of a URL\n// TODO: move to a general util file?\n\n\nfunction injectQsComponent(url, component) {\n  // inject it after the querystring but before the fragment\n  return url.replace(/(\\?.*?)?(#|$)/, function (whole, qs, hash) {\n    return (qs ? qs + '&' : '?') + component + hash;\n  });\n}\n\nvar main = createPlugin({\n  eventSourceDefs: [eventSourceDef]\n});\nexport default main;","map":{"version":3,"sources":["D:/Desktop/React/qrlog/node_modules/@fullcalendar/google-calendar/main.esm.js"],"names":["createPlugin","refineProps","requestJson","addDays","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","API_BASE","STANDARD_PROPS","url","String","googleCalendarApiKey","googleCalendarId","data","eventSourceDef","parseMeta","raw","standardProps","parseGoogleCalendarId","fetch","arg","onSuccess","onFailure","calendar","meta","eventSource","apiKey","opt","message","buildUrl","requestParams_1","buildRequestParams","range","dateEnv","body","xhr","error","errors","rawEvents","gcalItemsToRawEventDefs","items","timeZone","match","test","exec","decodeURIComponent","encodeURIComponent","extraParams","params","startStr","endStr","canComputeOffset","formatIso","start","end","toISOString","key","timeMin","timeMax","singleEvents","maxResults","gcalTimezone","map","item","gcalItemToRawEventDef","htmlLink","injectQsComponent","id","title","summary","dateTime","date","location","description","component","replace","whole","qs","hash","main","eventSourceDefs"],"mappings":"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","sourcesContent":["/*!\nFullCalendar Google Calendar Plugin v4.3.0\nDocs & License: https://fullcalendar.io/\n(c) 2019 Adam Shaw\n*/\n\nimport { createPlugin, refineProps, requestJson, addDays } from '@fullcalendar/core';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nvar __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\n\n// TODO: expose somehow\nvar API_BASE = 'https://www.googleapis.com/calendar/v3/calendars';\nvar STANDARD_PROPS = {\n    url: String,\n    googleCalendarApiKey: String,\n    googleCalendarId: String,\n    data: null\n};\nvar eventSourceDef = {\n    parseMeta: function (raw) {\n        if (typeof raw === 'string') {\n            raw = { url: raw };\n        }\n        if (typeof raw === 'object') {\n            var standardProps = refineProps(raw, STANDARD_PROPS);\n            if (!standardProps.googleCalendarId && standardProps.url) {\n                standardProps.googleCalendarId = parseGoogleCalendarId(standardProps.url);\n            }\n            delete standardProps.url;\n            if (standardProps.googleCalendarId) {\n                return standardProps;\n            }\n        }\n        return null;\n    },\n    fetch: function (arg, onSuccess, onFailure) {\n        var calendar = arg.calendar;\n        var meta = arg.eventSource.meta;\n        var apiKey = meta.googleCalendarApiKey || calendar.opt('googleCalendarApiKey');\n        if (!apiKey) {\n            onFailure({\n                message: 'Specify a googleCalendarApiKey. See http://fullcalendar.io/docs/google_calendar/'\n            });\n        }\n        else {\n            var url = buildUrl(meta);\n            var requestParams_1 = buildRequestParams(arg.range, apiKey, meta.data, calendar.dateEnv);\n            requestJson('GET', url, requestParams_1, function (body, xhr) {\n                if (body.error) {\n                    onFailure({\n                        message: 'Google Calendar API: ' + body.error.message,\n                        errors: body.error.errors,\n                        xhr: xhr\n                    });\n                }\n                else {\n                    onSuccess({\n                        rawEvents: gcalItemsToRawEventDefs(body.items, requestParams_1.timeZone),\n                        xhr: xhr\n                    });\n                }\n            }, function (message, xhr) {\n                onFailure({ message: message, xhr: xhr });\n            });\n        }\n    }\n};\nfunction parseGoogleCalendarId(url) {\n    var match;\n    // detect if the ID was specified as a single string.\n    // will match calendars like \"asdf1234@calendar.google.com\" in addition to person email calendars.\n    if (/^[^\\/]+@([^\\/\\.]+\\.)*(google|googlemail|gmail)\\.com$/.test(url)) {\n        return url;\n    }\n    else if ((match = /^https:\\/\\/www.googleapis.com\\/calendar\\/v3\\/calendars\\/([^\\/]*)/.exec(url)) ||\n        (match = /^https?:\\/\\/www.google.com\\/calendar\\/feeds\\/([^\\/]*)/.exec(url))) {\n        return decodeURIComponent(match[1]);\n    }\n}\nfunction buildUrl(meta) {\n    return API_BASE + '/' + encodeURIComponent(meta.googleCalendarId) + '/events';\n}\nfunction buildRequestParams(range, apiKey, extraParams, dateEnv) {\n    var params;\n    var startStr;\n    var endStr;\n    if (dateEnv.canComputeOffset) {\n        // strings will naturally have offsets, which GCal needs\n        startStr = dateEnv.formatIso(range.start);\n        endStr = dateEnv.formatIso(range.end);\n    }\n    else {\n        // when timezone isn't known, we don't know what the UTC offset should be, so ask for +/- 1 day\n        // from the UTC day-start to guarantee we're getting all the events\n        // (start/end will be UTC-coerced dates, so toISOString is okay)\n        startStr = addDays(range.start, -1).toISOString();\n        endStr = addDays(range.end, 1).toISOString();\n    }\n    params = __assign({}, (extraParams || {}), { key: apiKey, timeMin: startStr, timeMax: endStr, singleEvents: true, maxResults: 9999 });\n    if (dateEnv.timeZone !== 'local') {\n        params.timeZone = dateEnv.timeZone;\n    }\n    return params;\n}\nfunction gcalItemsToRawEventDefs(items, gcalTimezone) {\n    return items.map(function (item) {\n        return gcalItemToRawEventDef(item, gcalTimezone);\n    });\n}\nfunction gcalItemToRawEventDef(item, gcalTimezone) {\n    var url = item.htmlLink || null;\n    // make the URLs for each event show times in the correct timezone\n    if (url && gcalTimezone) {\n        url = injectQsComponent(url, 'ctz=' + gcalTimezone);\n    }\n    return {\n        id: item.id,\n        title: item.summary,\n        start: item.start.dateTime || item.start.date,\n        end: item.end.dateTime || item.end.date,\n        url: url,\n        location: item.location,\n        description: item.description\n    };\n}\n// Injects a string like \"arg=value\" into the querystring of a URL\n// TODO: move to a general util file?\nfunction injectQsComponent(url, component) {\n    // inject it after the querystring but before the fragment\n    return url.replace(/(\\?.*?)?(#|$)/, function (whole, qs, hash) {\n        return (qs ? qs + '&' : '?') + component + hash;\n    });\n}\nvar main = createPlugin({\n    eventSourceDefs: [eventSourceDef]\n});\n\nexport default main;\n"]},"metadata":{},"sourceType":"module"}